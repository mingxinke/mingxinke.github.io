<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>铭心客的博客</title>
  <icon>https://www.gravatar.com/avatar/cd7c9c0e16195b90b9b872fbb938fa25</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-01T14:36:13.795Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>铭心客</name>
    <email>mingxinke@hotmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>QT实现系统托盘</title>
    <link href="http://yoursite.com/2018/05/29/systemTrayIcon/"/>
    <id>http://yoursite.com/2018/05/29/systemTrayIcon/</id>
    <published>2018-05-29T15:37:37.000Z</published>
    <updated>2018-06-01T14:36:13.795Z</updated>
    
    <content type="html"><![CDATA[<p>QT中添加系统托盘使用 <strong>QSystemTrayIcon</strong> 类<br><a id="more"></a></p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><blockquote><ol><li>void setContextMenu(QMenu *menu)</li></ol></blockquote><p>设置托盘的右键菜单</p><blockquote><ol start="2"><li>void setIcon(const QIcon &amp;icon)</li></ol></blockquote><p>设置托盘的图标</p><blockquote><ol start="3"><li>void setToolTip(const QString &amp;tip)</li></ol></blockquote><p>设置鼠标放上去的提示信息</p><blockquote><ol start="4"><li>void showMessage(const QString &amp;title,const QString &amp;message, QSystemTrayIcon::MessageIcon icon = QSystemTrayIcon::Information, int millisecondsTimeoutHint = 10000)</li></ol></blockquote><p>这个函数可以显示图示信息，参数分别为标题、信息内容、信息类型、显示时间<br>信息类型如下：<br>  图标类型                    |  值  |        说明<br>—————————- | —- | ——————–<br>QSystemTrayIcon::NoIcon      |   0  | 没有图标显示.<br>QSystemTrayIcon::Information |   1  | 信息图标显示.<br>QSystemTrayIcon::Warning     |   2  | 警告图标显示.<br>QSystemTrayIcon::Critical    |   3  | 出错图标显示.</p><h4 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h4><blockquote><ol><li>void activated(QSystemTrayIcon::ActivationReason reason)  </li></ol></blockquote><p>用户激活图标时发出，参数为激活方式，详情如下：</p><table><thead><tr><th>激活方式</th><th>值</th><th>说明 </th></tr></thead><tbody><tr><td>SystemTrayIcon::Unknown</td><td>0</td><td>未知原因 </td></tr><tr><td>QSystemTrayIcon::Context</td><td>1</td><td>请求系统托盘条目的上下文菜单。</td></tr><tr><td>QSystemTrayIcon::DoubleClick</td><td>2</td><td>双击系统托盘</td></tr><tr><td>QSystemTrayIcon::Trigger</td><td>3</td><td>点击系统托盘</td></tr><tr><td>QSystemTrayIcon::MiddleClick</td><td>4</td><td>鼠标中键点击系统托盘</td></tr></tbody></table><blockquote><ol start="2"><li>void messageClicked()</li></ol></blockquote><p>当用户点击消息提示时发出</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>头文件代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MAINWINDOW_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAINWINDOW_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMainWindow&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QSystemTrayIcon&gt;</span></span></span><br><span class="line"></span><br><span class="line">QT_BEGIN_HEADER</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QAction</span>;</span></span><br><span class="line">QT_END_HEADER</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span> :</span> <span class="keyword">public</span> QMainWindow</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">MainWindow</span><span class="params">(QWidget *parent = <span class="number">0</span>)</span></span>;</span><br><span class="line">    ~MainWindow();</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">widgetScreenshot</span><span class="params">()</span></span>;    <span class="comment">// 界面截图</span></span><br><span class="line">    <span class="comment">// 托盘图标点击处理槽函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">trayIconActivated</span><span class="params">(QSystemTrayIcon::ActivationReason reason)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initWidget</span><span class="params">()</span></span>;  <span class="comment">// 初始化界面</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QSystemTrayIcon* m_pTrayIcon;</span><br><span class="line">    QAction* m_pActOpen;</span><br><span class="line">    QAction* m_pActClose;</span><br><span class="line">    QAction* m_pActScreen;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// MAINWINDOW_H</span></span></span><br></pre></td></tr></table></figure></p><p>cpp文件代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mainwindow.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QStandardPaths&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QGuiApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QScreen&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QAction&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMenu&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDateTime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line">    initWidget();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~MainWindow()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化界面</span></span><br><span class="line"><span class="keyword">void</span> MainWindow::initWidget()</span><br><span class="line">&#123;</span><br><span class="line">    m_pTrayIcon = <span class="keyword">new</span> QSystemTrayIcon(<span class="keyword">this</span>);</span><br><span class="line">    m_pTrayIcon-&gt;setIcon(QIcon(<span class="string">":/Icon/Resources/qt-logo.ico"</span>));       <span class="comment">//设置图标</span></span><br><span class="line">    m_pTrayIcon-&gt;setToolTip(tr(<span class="string">"System Tray Icon"</span>));        <span class="comment">//设置鼠标放上去显示的信息</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//右键菜单</span></span><br><span class="line">    QMenu *pMenu = <span class="keyword">new</span> QMenu(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开界面</span></span><br><span class="line">    m_pActOpen = <span class="keyword">new</span> QAction(tr(<span class="string">"Open widget"</span>), <span class="keyword">this</span>);</span><br><span class="line">    connect(m_pActOpen, SIGNAL(triggered()), <span class="keyword">this</span>, SLOT(show()));</span><br><span class="line">    pMenu-&gt;addAction(m_pActOpen);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭界面</span></span><br><span class="line">    m_pActClose = <span class="keyword">new</span> QAction(tr(<span class="string">"Close widget"</span>), <span class="keyword">this</span>);</span><br><span class="line">    connect(m_pActClose, SIGNAL(triggered()), <span class="keyword">this</span>, SLOT(hide()));</span><br><span class="line">    pMenu-&gt;addAction(m_pActClose);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 界面截图</span></span><br><span class="line">    m_pActScreen = <span class="keyword">new</span> QAction(tr(<span class="string">"Widget screenshot"</span>), <span class="keyword">this</span>);</span><br><span class="line">     connect(m_pActScreen, SIGNAL(triggered()), <span class="keyword">this</span>, SLOT(widgetScreenshot()));</span><br><span class="line">    pMenu-&gt;addAction(m_pActScreen);</span><br><span class="line"></span><br><span class="line">    m_pTrayIcon-&gt;setContextMenu(pMenu);  <span class="comment">//设置右键菜单</span></span><br><span class="line">    connect(m_pTrayIcon, SIGNAL(activated(QSystemTrayIcon::ActivationReason)),</span><br><span class="line">            <span class="keyword">this</span>, SLOT(trayIconActivated(QSystemTrayIcon::ActivationReason)));</span><br><span class="line">    m_pTrayIcon-&gt;show(); <span class="comment">//显示</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 界面截图</span></span><br><span class="line"><span class="keyword">void</span> MainWindow::widgetScreenshot()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 获取屏幕类</span></span><br><span class="line">    QScreen *pScreen = QGuiApplication::primaryScreen();</span><br><span class="line">    <span class="comment">// 获取第一个屏幕的图片</span></span><br><span class="line">    QPixmap mPixmap = pScreen-&gt;grabWindow(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 获取系统图片目录</span></span><br><span class="line">    QString savePath = QStandardPaths::writableLocation(QStandardPaths::PicturesLocation);</span><br><span class="line">    <span class="comment">// 设置名称为当前时间</span></span><br><span class="line">    savePath = QString( <span class="string">"%1/%2.png"</span>).arg(savePath).arg(QDateTime::currentDateTime().toString(<span class="string">"yyyyMMddHHmmss"</span>));</span><br><span class="line">    <span class="comment">// 保存图片</span></span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"savePath"</span> &lt;&lt; savePath;</span><br><span class="line">    mPixmap.save(savePath);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> MainWindow::trayIconActivated(QSystemTrayIcon::ActivationReason reason)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span>(reason)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> QSystemTrayIcon::Trigger: <span class="comment">// 鼠标点击</span></span><br><span class="line">        setWindowState(Qt::WindowActive);</span><br><span class="line">        activateWindow();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="显示效果"><a href="#显示效果" class="headerlink" title="显示效果"></a>显示效果</h4><p><img src="https://i.loli.net/2018/05/29/5b0d74f6a7aa1.png" alt="系统托盘"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;QT中添加系统托盘使用 &lt;strong&gt;QSystemTrayIcon&lt;/strong&gt; 类&lt;br&gt;
    
    </summary>
    
      <category term="QT" scheme="http://yoursite.com/categories/QT/"/>
    
    
      <category term="QT" scheme="http://yoursite.com/tags/QT/"/>
    
      <category term="系统托盘" scheme="http://yoursite.com/tags/%E7%B3%BB%E7%BB%9F%E6%89%98%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>QT实现屏幕截图</title>
    <link href="http://yoursite.com/2018/05/29/screenshort/"/>
    <id>http://yoursite.com/2018/05/29/screenshort/</id>
    <published>2018-05-29T15:37:14.000Z</published>
    <updated>2018-06-01T14:39:59.233Z</updated>
    
    <content type="html"><![CDATA[<p>屏幕截图是非常常用的功能，但是一直没有自己写过，现在使用QT实现非常简单的全屏截图。<br>屏幕截图主要使用了QGuiApplication类、QScreen类。<br>QGuiApplication类管理GUI应用程序的控制流和主设置。  </p><a id="more"></a><h4 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h4><p>代码很简单，只有一个函数，具体代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 界面截图</span></span><br><span class="line"><span class="keyword">void</span> MainWindow::widgetScreenshot()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 获取屏幕类</span></span><br><span class="line">    QScreen *pScreen = QGuiApplication::primaryScreen();</span><br><span class="line">    <span class="comment">// 获取第一个屏幕的图片</span></span><br><span class="line">    QPixmap mPixmap = pScreen-&gt;grabWindow(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 获取系统图片目录</span></span><br><span class="line">    QString savePath = QStandardPaths::writableLocation(QStandardPaths::PicturesLocation);</span><br><span class="line">    <span class="comment">// 设置名称为当前时间</span></span><br><span class="line">    savePath = QString( <span class="string">"%1/%2.png"</span>).arg(savePath).arg(QDateTime::currentDateTime().toString(<span class="string">"yyyyMMddHHmmss"</span>));</span><br><span class="line">    <span class="comment">// 保存图片</span></span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"savePath"</span> &lt;&lt; savePath;</span><br><span class="line">    mPixmap.save(savePath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>截图放在了系统图片目录：<br><img src="https://i.loli.net/2018/05/30/5b0ea53565586.png" alt="截图保存"></p><p>下面详细介绍 <strong>QGuiApplication</strong> 类和 <strong>QScreen</strong>类。  </p><h4 id="QGuiApplication类"><a href="#QGuiApplication类" class="headerlink" title="QGuiApplication类"></a>QGuiApplication类</h4><blockquote><p>QGuiApplication类管理GUI应用程序的控制流和主设置。<br>QGuiApplication包含主事件循环，其中所有来自窗口系统和其他源的事件都被处理和发送。它还处理应用程序的初始化和终结，并提供会话管理。此外，QGuiApplication处理大多数系统范围和应用程序范围的设置。<br>对于使用Qt的任何GUI应用程序，无论应用程序在任何给定时间是否有0、1、2或更多窗口，都有一个QGuiApplication对象。对于非GUI Qt应用程序，使用QCoreApplication，因为它不依赖于Qt GUI模块。对于基于Qt的Qt应用程序，使用QApplication代替，因为它提供了创建QWidget实例所需的一些功能。<br>通过实例()函数访问QGuiApplication对象，该函数返回相当于全局qApp指针的指针。<br>QGuiApplication的主要职责范围是:</p><ul><li>它使用用户的桌面设置来初始化应用程序，例如palette()、font()和styleHints()。它跟踪这些属性，以防止用户在全局环境中更改桌面，例如通过某种控制面板。</li><li>它执行事件处理，这意味着它从底层窗口系统接收事件并将它们分派给相关的小部件。您可以使用sendEvent()和postEvent()将您自己的事件发送到windows。<br>它解析常见的命令行参数，并相应地设置其内部状态。</li><li>它提供了通过 translate()对用户可见的字符串的本地化。</li><li>它提供了一些像 clipboard()这样的神奇的对象。</li><li>它知道应用程序的窗口。您可以使用topLevelAt()来询问哪个窗口位于某个位置，然后获取一个topLevelWindows()列表，等等。</li><li>它管理应用程序的鼠标光标处理，见setOverrideCursor()</li><li>它为复杂的会话管理提供支持。这使得应用程序可以在用户注销时优雅地终止，如果不可能终止关闭过程，甚至在将来的会话中保存整个应用程序的状态。查看issession恢复()、sessionId()和commitDataRequest()和saveStateRequest()以获取详细信息。<br>由于QGuiApplication对象执行了这么多的初始化，所以必须在创建与用户界面相关的其他对象之前创建它。QGuiApplication还处理常见的命令行参数。因此，在对argv的任何解释或修改之前创建它通常是一个好主意。</li></ul></blockquote><h5 id="公有函数"><a href="#公有函数" class="headerlink" title="公有函数"></a>公有函数</h5><blockquote><ol><li>qreal QGuiApplication::devicePixelRatio() const  </li></ol></blockquote><p>返回系统中发现的最高屏幕设备像素比率。这是物理像素和设备独立像素之间的比率。只有你不知道你的目标窗口时，才使用此函数。如果知道目标窗口，则使用QWindow::devicePixelRatio()。  </p><blockquote><ol start="2"><li>bool QGuiApplication::isSavingSession() const</li></ol></blockquote><p>如果应用程序当前保存会话，则返回true；否则返回false。当commitDataRequest()和saveStateRequest()被释放时，这是正确的，但是当窗口随后被会话管理关闭时也是如此。  </p><blockquote><ol start="3"><li>bool QGuiApplication::isSessionRestored() const</li></ol></blockquote><p>如果应用程序已从较早的会话恢复，则返回true;否则返回false。</p><blockquote><ol start="4"><li>QString QGuiApplication::sessionId() const</li></ol></blockquote><p>返回当前会话的标识。如果这个应用程序从较早的会话恢复，此标识与前一会话中的标识符相同。对于不同应用程序和同一应用程序的不同实例，会话标识符都是唯一的。</p><blockquote><ol start="5"><li>QString QGuiApplication::sessionKey() const</li></ol></blockquote><p>在当前会话中返回密钥。如果应用程序从较早的会话中恢复，此键与前一会话结束时相同。每次保存会话时，会话密钥都会发生改变。如果关闭过程被取消，则在再次关闭会话时将使用另一会话密钥。</p><h5 id="静态公有函数"><a href="#静态公有函数" class="headerlink" title="静态公有函数"></a>静态公有函数</h5><blockquote><ol><li>QWindowList QGuiApplication::allWindows()</li></ol></blockquote><p>返回应用程序中所有的窗口列表，如果程序没有窗口，列表为空。</p><blockquote><ol start="2"><li>applicationDisplayName : QString<blockquote><p>QString applicationDisplayName()<br>void setApplicationDisplayName(const QString &amp;name)</p></blockquote></li></ol></blockquote><p>此属性保存该应用程序的用户可见名称。如果没有设置，应用程序显示名称默认为应用程序名称。</p><blockquote><ol start="3"><li>Qt::ApplicationState QGuiApplication::applicationState()</li></ol></blockquote><p>返回应用程序的当前状态。您可以对应用程序状态更改做出响应，以执行诸如停止/恢复cpu密集型任务、释放/加载资源或保存/恢复应用程序数据等操作。<br>状态如下：<br>应用状态                  | 值         | 说明<br>———————— | ———- | ——-<br>Qt::ApplicationSuspended | 0x00000000 | 应用程序即将暂停。当进入这个状态时，应用程序应该保存它的状态，停止所有的活动，并准备好让代码执行停止。暂停时，应用程序可以在没有进一步警告的情况下随时被杀死(例如，当低内存迫使操作系统清除暂停的应用程序时)。<br>Qt::ApplicationHidden    | 0x00000001 | 应用程序隐藏并在后台运行。这是需要进行后台处理的应用程序的正常状态，比如播放音乐，而用户与其他应用程序交互。在进入这个状态时，应用程序应该释放所有图形资源。<br>Qt::ApplicationInactive  | 0x00000002 | 应用程序是可见的，但没有选择在前面。在桌面平台上，这通常意味着用户激活了另一个应用程序。在移动平台上，当操作系统用输入的呼叫或短信来打断用户时，进入这个状态更为常见。在这种状态下，考虑减少cpu密集型任务。<br>Qt::ApplicationActive    | 0x00000003 | 应用程序是可见的，并且被显示在前面。</p><blockquote><ol start="4"><li>void QGuiApplication::changeOverrideCursor(const QCursor &amp;cursor)</li></ol></blockquote><p>更改当前活动的应用程序覆盖当前的光标。<strong>注意：如果没有调用setOverrideCursor()，则该函数没有效果。</strong></p><blockquote><ol start="5"><li>QClipboard *QGuiApplication::clipboard()</li></ol></blockquote><p>返回剪切板的交互对象</p><blockquote><ol start="6"><li>desktopFileName : QString<blockquote><p>QString desktopFileName()<br>void setDesktopFileName(const QString &amp;name)</p></blockquote></li></ol></blockquote><p>此属性保存此应用程序的桌面条目的基本名称。<br>这是一个文件名称，没有完整的路径，它是根据freedesktop desktop entry规范来表示这个应用程序的桌面条目。</p><blockquote><ol start="7"><li>bool QGuiApplication::desktopSettingsAware()</li></ol></blockquote><p>如果Qt设置为使用系统的标准颜色、字体等，则返回true;否则返回false。默认是正确的。</p><blockquote><ol start="8"><li>int QGuiApplication::exec()</li></ol></blockquote><p>进入主事件循环并等待直到exit()被调用，然后返回被设置为exit()的值(如果exit()调用exit()，则为0)。<br>需要调用此函数来启动事件处理。主事件循环从窗口系统接收事件，并将这些事件分派给应用程序小部件。<br>通常，在调用exec()之前不会发生用户交互。<br>为了使您的应用程序执行空闲处理，例如，在没有挂起事件的情况下执行一个特殊的函数，使用一个带有0超时的QTimer。可以使用processEvents()实现更高级的空闲处理方案。<br>我们建议您将清理代码连接到aboutToQuit()信号，而不是将其放入应用程序的main()函数中。这是因为，在某些平台上，QApplication::exec()调用可能不会返回。</p><blockquote><ol start="9"><li>QObject *QGuiApplication::focusObject()</li></ol></blockquote><p>返回当前活动窗口中的QObject，该窗口将是与焦点相关的事件的最终接收方，例如关键事件。</p><blockquote><ol start="10"><li>QWindow *QGuiApplication::focusWindow()</li></ol></blockquote><p>返回接收与焦点相关的事件的QWindow，例如关键事件。</p><blockquote><ol start="11"><li>QFont QGuiApplication::font()</li></ol></blockquote><p>返回应用程序默认的字体</p><blockquote><ol start="12"><li>QInputMethod *QGuiApplication::inputMethod()</li></ol></blockquote><p>返回输入的方法。输入方法返回有关虚拟键盘的状态和位置的属性。它还提供关于当前焦点输入元素位置的信息。</p><blockquote><ol start="13"><li>bool QGuiApplication::isFallbackSessionManagementEnabled()</li></ol></blockquote><p>返回QGuiApplication是否将使用回退会话管理。<br>默认是正确的。如果这是真的，会话管理器允许用户交互，QGuiApplication将尝试在提交任务()后关闭顶层窗口。如果窗口不能关闭，会话关闭将被取消，应用程序将继续运行。</p><blockquote><ol start="14"><li>Qt::KeyboardModifiers QGuiApplication::keyboardModifiers()</li></ol></blockquote><p>返回键盘上修饰符键的当前状态。当事件队列清空后，将自动更改键盘状态(QEvent::KeyPress和QEvent::KeyRelease事件)，当前状态被同步更新。<br>应该注意的是，这可能并没有反映在调用时在输入设备上所持有的实际的键，而是在上述事件中最后一次报告的修饰符。如果没有密钥，Qt::NoModifier返回。</p><blockquote><ol start="15"><li>QWindow *QGuiApplication::modalWindow()</li></ol></blockquote><p>返回最近显示的模式窗口。如果没有显示模式窗口，则该函数返回零。<br>模式窗口是一个窗口，它的modality属性设置为Qt::WindowModal或Qt::ApplicationModal。在用户可以继续使用程序的其他部分之前，必须关闭一个模式窗口。模式窗口是在堆栈中组织的。这个函数将返回堆栈顶部的模式窗口。</p><blockquote><ol start="16"><li>Qt::MouseButtons QGuiApplication::mouseButtons()</li></ol></blockquote><p>返回鼠标上的按钮的当前状态。当前状态是同步更新的，因为事件队列清空了会自动改变鼠标状态的事件(QEvent: MouseButtonPress和QEvent::MouseButtonRelease事件)。</p><blockquote><ol start="17"><li>QCursor *QGuiApplication::overrideCursor()</li></ol></blockquote><p>返回活动的应用程序覆盖光标。<br>如果没有定义应用程序光标，则该函数返回0。</p><blockquote><ol start="18"><li>QPalette QGuiApplication::palette()</li></ol></blockquote><p>返回默认的应用程序调色板。</p><blockquote><ol start="19"><li>QFunctionPointer QGuiApplication::platformFunction(const QByteArray &amp;function)</li></ol></blockquote><p>从平台插件匹配函数返回一个函数指针。</p><blockquote><ol start="20"><li>platformName : const QString<blockquote><p>QString platformName()</p></blockquote></li></ol></blockquote><p>此属性包含底层平台插件的名称。QPA平台插件位于qtbase\src\plugins\platform中。支持如下平台：</p><ul><li>android   </li><li>cocoa（macOS）</li><li>directfb</li><li>eglfs（平台插件，它在EGL和OpenGL ES 2.0之上运行Qt5应用程序，而没有实际的窗口系统）</li><li>ios （也可以被使用tvOS）</li><li>kms（一个使用内核modesetting和DRM(直接呈现管理器)的实验性平台插件）</li><li>linuxfb</li><li>minimal （最小化是一个例子，可以使用该插件在没有GUI的环境中运行GUI应用程序）</li><li>minimalegl（插件例子）</li><li>offscreen</li><li>openwwfd</li><li>qnx</li><li>windows</li><li>xcb（普通桌面Linux平台上使用的X11插件）</li></ul><blockquote><ol start="21"><li>QPlatformNativeInterface *QGuiApplication::platformNativeInterface()</li></ol></blockquote><p>返回平台的本机接口，用于平台特定功能。</p><blockquote><ol start="22"><li>QScreen * const<blockquote><p>QScreen <em> primaryScreen()<br>信号：<br>void primaryScreenChanged(QScreen </em>screen)</p></blockquote></li></ol></blockquote><p>此属性保存应用程序的主(或默认)屏幕。<br>这将是最初显示QWindows的屏幕，除非另有说明。</p><blockquote><ol start="23"><li>Qt::KeyboardModifiers QGuiApplication::queryKeyboardModifiers()</li></ol></blockquote><p>查询并返回键盘上修饰符键的状态。与keyboardmodifier不同，该方法返回在调用该方法时保存在输入设备上的实际密钥。它不依赖于此进程接收到的按键事件，这使得在移动窗口时检查修饰符成为可能。<br><strong>注意，在大多数情况下，您应该使用keyboardModifiers()，因为它包含了修饰符的状态，因为它包含了当前处理的事件时的状态。</strong></p><blockquote><ol start="24"><li>QList<qscreen *=""> screens()</qscreen></li></ol></blockquote><p>返回与应用程序连接的窗口系统相关的所有屏幕的列表。</p><h4 id="QScreen类"><a href="#QScreen类" class="headerlink" title="QScreen类"></a>QScreen类</h4><h5 id="公有函数-1"><a href="#公有函数-1" class="headerlink" title="公有函数"></a>公有函数</h5><blockquote><ol><li>int QScreen::angleBetween(Qt::ScreenOrientation a, Qt::ScreenOrientation b) const</li></ol></blockquote><p>方便函数计算旋转角度，从旋转a到旋转b。<br>Qt::ScreenOrientation枚举类型指定屏幕可能具有的各种方向，具体如下：<br>类型                      | 值         | 说明<br>———————— | ———- |——<br>Qt::PrimaryOrientation   | 0x00000000 | 显示的主要取向。<br>Qt::LandscapeOrientation | 0x00000002 | 景观朝向，显示宽度大于显示高度。<br>Qt::PortraitOrientation  | 0x00000001 | 人像定位，显示高度大于显示宽度，相对于景观顺时针旋转90度。<br>Qt::InvertedLandscapeOrientation | 0x00000008 | 倒转的景观朝向，相对于景观旋转180度。<br>Qt::InvertedPortraitOrientation  | 0x00000004 | 倒置的人像方向，旋转180度相对于人像。</p><blockquote><ol start="2"><li>availableGeometry : const QRect<blockquote><p>QRect  availableGeometry() const<br>信号：<br>void availableGeometryChanged(const QRect &amp;geometry)</p></blockquote></li></ol></blockquote><p>此属性以像素为单位保存屏幕可用的几何图形。<br>可用的几何图形是不包括窗口管理器保留区域的几何图形，如任务栏和系统菜单。</p><blockquote><ol start="3"><li>availableSize : const QSize<blockquote><p>QSize availableSize() const<br>信号：<br>void availableGeometryChanged(const QRect &amp;geometry)</p></blockquote></li></ol></blockquote><p>此属性以像素为单位保存屏幕的可用大小。<br>可用的大小是不包括窗口管理器预留区域(如任务栏和系统菜单)的大小。</p><blockquote><ol start="4"><li>availableVirtualGeometry : const QRect<blockquote><p>QRect availableVirtualGeometry() const<br>信号：<br>void virtualGeometryChanged(const QRect &amp;rect)</p></blockquote></li></ol></blockquote><p>此属性保存该屏幕所属的虚拟桌面的可用几何图形。<br>返回与此屏幕对应的虚拟桌面的可用几何图形。<br>这是虚拟兄弟姐妹的单个可用几何图形的联合。</p><blockquote><ol start="5"><li>availableVirtualSize : const QSize<blockquote><p>QSize availableVirtualSize() const<br>信号：<br>void virtualGeometryChanged(const QRect &amp;rect)</p></blockquote></li></ol></blockquote><p>此属性保存该屏幕所属的虚拟桌面的可用大小。<br>返回与此屏幕对应的虚拟桌面的可用像素大小。<br>这是虚拟兄弟的单个可用几何图形的组合大小。</p><blockquote><ol start="6"><li>depth : const int<blockquote><p>int depth() const</p></blockquote></li></ol></blockquote><p>此属性保存屏幕的颜色深度</p><blockquote><ol start="7"><li>devicePixelRatio : const qreal<blockquote><p>qreal devicePixelRatio() const<br>信号：<br>void physicalDotsPerInchChanged(qreal dpi)</p></blockquote></li></ol></blockquote><p>此属性保存物理像素和与设备无关的像素之间的屏幕比值。<br>返回屏幕的物理像素与设备独立像素之间的比率。<br>普通的数值是1.0在正常显示和2.0在“视网膜”显示。更高的值也是可能的。</p><blockquote><ol start="8"><li>geometry : const QRect<blockquote><p>QRect geometry() const<br>信号：<br>void geometryChanged(const QRect &amp;geometry)</p></blockquote></li></ol></blockquote><p>此属性以像素为单位保存屏幕的几何图形。 </p><blockquote><ol start="9"><li>QPixmap QScreen::grabWindow(WId window, int x = 0, int y = 0, int width = -1, int height = -1)</li></ol></blockquote><p>创建并返回一个由QRect(x, y, width, height)限制的给定窗口内容所构建的像素图。<br>参数(x, y)指定窗口中的偏移量，而(宽度、高度)指定要复制的区域。如果宽度为负，函数将所有内容复制到窗口的右边框。如果高度为负，则函数将所有内容复制到窗口的底部。<br>可以使用QWidget: winId()函数检索窗口系统标识符。使用窗口标识符而不是QWidget的基本原理是启用不属于应用程序、窗口系统框架等的窗口。</p><blockquote><ol start="10"><li>QPlatformScreen *QScreen::handle() const</li></ol></blockquote><p>获取平台屏幕手柄</p><blockquote><ol start="11"><li>bool QScreen::isLandscape(Qt::ScreenOrientation o) const</li></ol></blockquote><p>如果o是横景或倒景，则返回真值的便利函数;否则返回false。</p><blockquote><ol start="12"><li>bool QScreen::isPortrait(Qt::ScreenOrientation o) const </li></ol></blockquote><p>如果o是竖式或倒立式，则返回true的便利函数;否则返回false。</p><blockquote><ol start="13"><li>logicalDotsPerInch : const qreal<blockquote><p>qreal logicalDotsPerInch() const<br>信号：<br>void logicalDotsPerInchChanged(qreal dpi)</p></blockquote></li></ol></blockquote><p>此属性保存每英寸逻辑点或像素的数量。<br>此值可用于将字体点大小转换为像素大小。<br>这是一个方便的属性，就是logicalDotsPerInchX和logicalDotsPerInchY属性的平均值。</p><blockquote><ol start="14"><li>logicalDotsPerInchX : const qreal<blockquote><p>qreal logicalDotsPerInchX() const<br>信号：<br>void logicalDotsPerInchChanged(qreal dpi)</p></blockquote></li></ol></blockquote><p>此属性保存水平方向上每英寸逻辑点或像素的数量。<br>此值用于将字体点大小转换为像素大小。</p><blockquote><ol start="15"><li>logicalDotsPerInchY : const qreal<blockquote><p>qreal logicalDotsPerInchY() const<br>信号：<br>void logicalDotsPerInchChanged(qreal dpi)</p></blockquote></li></ol></blockquote><p>此属性保存垂直方向上每英寸逻辑点或像素的数量。<br>此值用于将字体点大小转换为像素大小。</p><blockquote><ol start="16"><li>QRect QScreen::mapBetween(Qt::ScreenOrientation a, Qt::ScreenOrientation b, const QRect &amp;rect) const</li></ol></blockquote><p>在两个屏幕朝向之间绘制矩形。</p><blockquote><ol start="17"><li>name : const QString<blockquote><p>QString name() cons</p></blockquote></li></ol></blockquote><p>此属性包含表示屏幕的用户外观字符串。<br>例如，在X11上，它们对应于XRandr屏幕名称，通常是“VGA1”、“HDMI1”等。</p><blockquote><ol start="18"><li>nativeOrientation : const Qt::ScreenOrientation<blockquote><p>Qt::ScreenOrientation nativeOrientation() const</p></blockquote></li></ol></blockquote><p>此属性保存本机屏幕定向。<br>屏幕的本机方向是设备的logo标签以正确的方式出现的方向，或者Qt: PrimaryOrientation(如果平台不支持这个功能的话)。本机方向是硬件的属性，不会改变。</p><blockquote><ol start="19"><li>orientation : const Qt::ScreenOrientation<blockquote><p>Qt::ScreenOrientation orientation() const<br>信号：<br>void orientationChanged(Qt::ScreenOrientation orientation)</p></blockquote></li></ol></blockquote><p>此属性保存屏幕方向。<br>屏幕方向表示显示的物理方向。例如，移动设备的屏幕方向会根据手持方式而改变。对方向的更改可能会也可能不会触发对屏幕主方向的更改。<br>对该属性的更改将通过orientationUpdateMask()进行过滤，因此为了接收方向更新，应用程序必须首先调用setOrientationUpdateMask()，并使用希望接收的方向的掩码。</p><blockquote><ol start="20"><li>Qt::ScreenOrientations QScreen::orientationUpdateMask() const</li></ol></blockquote><p>返回当前设置的方向更新掩码。</p><blockquote><ol start="21"><li>physicalDotsPerInch : const qreal<blockquote><p>qreal physicalDotsPerInch() const<br>信号：<br>void physicalDotsPerInchChanged(qreal dpi)</p></blockquote></li></ol></blockquote><p>此属性保存每英寸的物理点或像素个数。<br>这个值表示屏幕显示的像素密度。根据底层系统提供的信息，价值可能不是完全准确的。<br>这是一种便利性质它只是物理和物理的平均性质。</p><blockquote><ol start="22"><li>physicalDotsPerInchX : const qreal<blockquote><p>qreal physicalDotsPerInchX() const<br>信号：<br>void physicalDotsPerInchChanged(qreal dpi)</p></blockquote></li></ol></blockquote><p>这个属性包含水平方向上每英寸的物理点或像素的数量。<br>这个值表示屏幕显示的实际水平像素密度。根据底层系统提供的信息，价值可能不是完全准确的。</p><blockquote><ol start="23"><li>physicalDotsPerInchY : const qreal<blockquote><p>qreal physicalDotsPerInchY() const<br>信号：<br>void physicalDotsPerInchChanged(qreal dpi)</p></blockquote></li></ol></blockquote><p>这个属性包含垂直方向上每英寸的物理点或像素的数量。<br>这个值表示屏幕显示的实际水平像素密度。根据底层系统提供的信息，价值可能不是完全准确的。</p><blockquote><ol start="24"><li>physicalSize : const QSizeF<blockquote><p>QSizeF physicalSize() const<br>信号：<br>void physicalSizeChanged(const QSizeF &amp;size)</p></blockquote></li></ol></blockquote><p>此属性保存屏幕的物理大小(以毫米为单位)。<br>物理大小表示屏幕显示的实际物理尺寸。<br>根据底层系统提供的信息，价值可能不是完全准确的。</p><blockquote><ol start="25"><li>primaryOrientation : const Qt::ScreenOrientation<blockquote><p>Qt::ScreenOrientation primaryOrientation() const<br>信号：<br>void primaryOrientationChanged(Qt::ScreenOrientation orientation)</p></blockquote></li></ol></blockquote><p>此属性保留主屏幕方向。<br>如果屏幕几何图形的宽度大于或等于它的高度，则主屏幕方向为Qt::LandscapeOrientation方向，否则则为 Qt::PortraitOrientation。当屏幕方向改变时(例如，当显示被旋转时)，这个属性可能会改变。但是，这种行为是与平台相关的，通常可以在应用程序清单文件中指定。</p><blockquote><ol start="26"><li>refreshRate : const qreal<blockquote><p>qreal refreshRate() const<br>信号：<br>void refreshRateChanged(qreal refreshRate)</p></blockquote></li></ol></blockquote><p>此属性保存Hz中屏幕的大致垂直刷新速度。</p><blockquote><ol start="27"><li>void QScreen::setOrientationUpdateMask(Qt::ScreenOrientations mask)</li></ol></blockquote><p>设置应用程序感兴趣的接收与此屏幕相关的更新的方向。</p><blockquote><ol start="28"><li>size : const QSize<blockquote><p>QSize size() const<br>信号：<br>void geometryChanged(const QRect &amp;geometry)</p></blockquote></li></ol></blockquote><p>此属性保存屏幕的像素分辨率。</p><blockquote><ol start="29"><li>QTransform QScreen::transformBetween(Qt::ScreenOrientation a, Qt::ScreenOrientation b, const QRect &amp;target) const</li></ol></blockquote><p>方便函数，用于计算从定位a定义的坐标系映射到定位b和目标维目标定义的坐标系的变换。</p><blockquote><ol start="30"><li>virtualGeometry : const QRect<blockquote><p>QRect virtualGeometry() const<br>信号：<br>void virtualGeometryChanged(const QRect &amp;rect)</p></blockquote></li></ol></blockquote><p>此属性保存该屏幕所属的虚拟桌面的像素几何。<br>返回与此屏幕对应的虚拟桌面的像素几何。<br>这是虚拟桌面的各个几何图形的联合。</p><blockquote><ol start="31"><li>QList<qscreen *=""> QScreen::virtualSiblings() const</qscreen></li></ol></blockquote><p>获取屏幕的虚拟桌面。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;屏幕截图是非常常用的功能，但是一直没有自己写过，现在使用QT实现非常简单的全屏截图。&lt;br&gt;屏幕截图主要使用了QGuiApplication类、QScreen类。&lt;br&gt;QGuiApplication类管理GUI应用程序的控制流和主设置。  &lt;/p&gt;
    
    </summary>
    
      <category term="Qt" scheme="http://yoursite.com/categories/Qt/"/>
    
    
      <category term="Qt" scheme="http://yoursite.com/tags/Qt/"/>
    
      <category term="屏幕截图" scheme="http://yoursite.com/tags/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="http://yoursite.com/2018/05/25/mduse/"/>
    <id>http://yoursite.com/2018/05/25/mduse/</id>
    <published>2018-05-25T14:07:54.000Z</published>
    <updated>2018-05-29T11:34:14.614Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="宗旨"><a href="#宗旨" class="headerlink" title="宗旨"></a>宗旨</h3><p>Markdown语法的 <strong>目标是实现[易读易写]</strong><br>Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像<em>强调</em>。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。<br><a id="more"></a></p><h3 id="兼容HTML"><a href="#兼容HTML" class="headerlink" title="兼容HTML"></a>兼容HTML</h3><p><strong>Markdown语法的目标是:成为一种适用于网络的书写语言。</strong><br>Markdown不是要取代HTML，甚至也没有要和它相近，它的语法种类很少，只对应HTML标记的一小部分Markdown 的构想不是要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。<em>Markdown 的理念是，能让文档更容易读、写和随意改</em>。HTML 是一种发布的格式，Markdown 是一种书写的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。<br>要制约的只有一些 HTML 区块元素――比如<code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code><br>等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的标签。<br>例子如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">这是一个普通段落。</span><br><span class="line"></span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;Foo&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">这是另一个普通段落。</span><br></pre></td></tr></table></figure></p><p>这是一个普通段落。</p><table><br>    <tr><br>        <td>Foo</td><br>    </tr><br></table><p>这是另一个普通段落。</p><h2 id="区块元素"><a href="#区块元素" class="headerlink" title="区块元素"></a>区块元素</h2><h3 id="段落和换行"><a href="#段落和换行" class="headerlink" title="段落和换行"></a>段落和换行</h3><p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。<br><br>「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 <code>&lt;br /&gt;</code> 标签。</p><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>Markdown支持两种标题的语法：类<code>Setext</code>和<code>atx</code>形式。<br>类Setext形式是用底线的形式，利用<code>=</code>(最高阶标题)和<code>-</code>(第二阶标题)，<code>任何数量的 = 和 - 都可以有效果</code>。例如：</p><h1 id="This-is-an-H1"><a href="#This-is-an-H1" class="headerlink" title="This is an H1"></a>This is an H1</h1><h2 id="This-is-an-H2"><a href="#This-is-an-H2" class="headerlink" title="This is an H2"></a>This is an H2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">This is an H1</span><br><span class="line">=============</span><br><span class="line">This is an H2</span><br><span class="line">-------------</span><br></pre></td></tr></table></figure><p>类Atx形式则是在行首插入1到6个<code>#</code>，对应到标题1到6阶，例如：</p><h1 id="这是-H1"><a href="#这是-H1" class="headerlink" title="这是 H1"></a>这是 H1</h1><h2 id="这是-H2"><a href="#这是-H2" class="headerlink" title="这是 H2"></a>这是 H2</h2><h6 id="这是-H6"><a href="#这是-H6" class="headerlink" title="这是 H6"></a>这是 H6</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 这是 H1</span><br><span class="line">## 这是 H2</span><br><span class="line">###### 这是 H6</span><br></pre></td></tr></table></figure><h3 id="区块引用-Blockquotes"><a href="#区块引用-Blockquotes" class="headerlink" title="区块引用 Blockquotes"></a>区块引用 Blockquotes</h3><p>Markdown 标记区块引用是使用类似 email 中用<code>&gt;</code>的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上<code>&gt;</code>：</p><blockquote><p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p><p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse<br>id sem consectetuer libero luctus adipiscing.</p></blockquote><p>Markdown 也允许你偷懒只在整个段落的第一行最前面加上<code>&gt;</code>：</p><blockquote><p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p></blockquote><blockquote><p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse<br>id sem consectetuer libero luctus adipiscing.</p></blockquote><p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的<code>&gt;</code>：</p><blockquote><p>This is the first level of quoting.</p><blockquote><p>This is nested blockquote.</p></blockquote><p>Back to the first level.</p></blockquote><p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p><blockquote><h2 id="这是一个标题。"><a href="#这是一个标题。" class="headerlink" title="这是一个标题。"></a>这是一个标题。</h2><ol><li>这是第一行列表项。</li><li>这是第二行列表项。</li></ol><p>给出一些例子代码：</p><pre><code>return shell_exec(&quot;echo $input | $markdown_script&quot;);</code></pre></blockquote><p>任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择增加引用阶层。</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>Markdown支持有序和无序列表。<br><br>无需列表中使用星号、加号或者减号为列表标记：</p><ul><li>red</li><li>Green</li><li>Blue</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* red</span><br><span class="line">* Green</span><br><span class="line">* Blue</span><br></pre></td></tr></table></figure><p>等同于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+   Red</span><br><span class="line">+   Green</span><br><span class="line">+   Blue</span><br></pre></td></tr></table></figure></p><p>也等同于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-   Red</span><br><span class="line">-   Green</span><br><span class="line">-   Blue</span><br></pre></td></tr></table></figure></p><p>有序列表则使用数字接着一个英文句点：</p><ol><li>Bird</li><li>McHale</li><li>Parish</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.  Bird</span><br><span class="line">2.  McHale</span><br><span class="line">3.  Parish</span><br></pre></td></tr></table></figure><p>很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">&lt;li&gt;Bird&lt;/li&gt;</span><br><span class="line">&lt;li&gt;McHale&lt;/li&gt;</span><br><span class="line">&lt;li&gt;Parish&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure></p><p>你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。<br><br>如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。<br><br>列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。<br><br>要让列表看起来更漂亮，你可以把内容用固定的缩进整理好：</p><ul><li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.<br>Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,<br>viverra nec, fringilla in, laoreet vitae, risus.</li><li>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.<br>Suspendisse id sem consectetuer libero luctus adipiscing.</li></ul><p>如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 </p><p> 标签包起来，举例来说：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*   Bird</span><br><span class="line">*   Magic</span><br><span class="line">转为</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;Bird&lt;/li&gt;</span><br><span class="line">&lt;li&gt;Magic&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*   Bird</span><br><span class="line"></span><br><span class="line">*   Magic</span><br><span class="line">转为</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.  This is a list item with two paragraphs. Lorem ipsum dolor</span><br><span class="line">    sit amet, consectetuer adipiscing elit. Aliquam hendrerit</span><br><span class="line">    mi posuere lectus.</span><br><span class="line"></span><br><span class="line">    Vestibulum enim wisi, viverra nec, fringilla in, laoreet</span><br><span class="line">    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum</span><br><span class="line">    sit amet velit.</span><br><span class="line"></span><br><span class="line">2.  Suspendisse id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></table></figure></p><p>如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*   This is a list item with two paragraphs.</span><br><span class="line"></span><br><span class="line">    This is the second paragraph in the list item. You&apos;re</span><br><span class="line">only required to indent the first line. Lorem ipsum dolor</span><br><span class="line">sit amet, consectetuer adipiscing elit.</span><br><span class="line"></span><br><span class="line">*   Another item in the same list.</span><br></pre></td></tr></table></figure></p><p>如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*   一列表项包含一个列表区块：</span><br><span class="line"></span><br><span class="line">        &lt;代码写在这&gt;</span><br></pre></td></tr></table></figure></p><p>当然，项目列表很可能会不小心产生，像是下面这样的写法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1986. What a great season.</span><br></pre></td></tr></table></figure></p><p>换句话说，也就是在行首出现数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠。1986. What a great season.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1986\. What a great season.</span><br></pre></td></tr></table></figure></p><h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 <code>&lt;pre&gt;</code> 和 <code>&lt;code&gt;</code> 标签来把代码区块包起来。<br><br>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，<strong>要和上一行空一行</strong> 例如，下面的输入：</p><p>这是一个普通段落：</p><pre><code>这是一个代码区块</code></pre><p>一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。<br>也可以使用三个```表示</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(a&gt;b)</span><br><span class="line">&#123;</span><br><span class="line">  a = 10;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="区段元素"><a href="#区段元素" class="headerlink" title="区段元素"></a>区段元素</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>Markdown 支持两种形式的链接语法： <code>行内式</code>和<code>参考式</code>两种形式。<br><br>不管是哪一种，链接文字都是用 [方括号] 来标记。<br><br>要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：<br>This is <a href="http://example.com/" title="Title" target="_blank" rel="noopener">an example</a> inline link.</p><p><a href="http://example.net/" target="_blank" rel="noopener">This link</a> has no title attribute.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">This is [an example](http://example.com/ &quot;Title&quot;) inline link.</span><br><span class="line"></span><br><span class="line">[This link](http://example.net/) has no title attribute.</span><br></pre></td></tr></table></figure></p><p>会产生：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt;</span><br><span class="line">an example&lt;/a&gt; inline link.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has no</span><br><span class="line">title attribute.&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><p>如果你是要链接到同样主机的资源，你可以使用相对路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">See my [About](/about/) page for details.</span><br></pre></td></tr></table></figure><p>接着，在文件的任意处，你可以把这个标记的链接内容定义出来：</p><p><a href="http://example.com/" target="_blank" rel="noopener">链接</a> “请点击这里”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[链接](http://example.com/) &quot;请点击这里&quot;</span><br></pre></td></tr></table></figure></p><p>链接内容定义的形式为：</p><ul><li>方括号（前面可以选择性地加上至多三个空<br>格来缩进），里面输入链接文字</li><li>接着一个冒号</li><li>接着一个以上的空格或制表符<br>接着链接的网址</li><li>选择性地接着 title 内容，可以用单引号、双引号或是括弧包着</li></ul><p>下面这三种链接的定义都是相同：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[foo]: http://example.com/  &quot;Optional Title Here&quot;</span><br><span class="line">[foo]: http://example.com/  &apos;Optional Title Here&apos;</span><br><span class="line">[foo]: http://example.com/  (Optional Title Here)</span><br></pre></td></tr></table></figure></p><p><strong>请注意：</strong> 有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。<br><br>链接网址也可以用尖括号包起来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[id]: &lt;http://example.com/&gt;  &quot;Optional Title Here&quot;</span><br></pre></td></tr></table></figure></p><h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p>Markdown 使用星号（*）和底线（_）作为标记强调字词的符号，被 * 或 _ 包围的字词会被转成用 <code>&lt;em&gt;</code> 标签包围，用两个 * 或 _ 包起来的话，则会被转成 <code>&lt;strong&gt;</code>，例如：</p><p><em>single asterisks</em><br><em>single underscores</em><br><strong>double asterisks</strong><br><strong>double underscores</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*single asterisks*</span><br><span class="line">_single underscores_</span><br><span class="line">**double asterisks**</span><br><span class="line">__double underscores__</span><br></pre></td></tr></table></figure></p><p>会转成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;em&gt;single asterisks&lt;/em&gt;</span><br><span class="line">&lt;em&gt;single underscores&lt;/em&gt;</span><br><span class="line">&lt;strong&gt;double asterisks&lt;/strong&gt;</span><br><span class="line">&lt;strong&gt;double underscores&lt;/strong&gt;</span><br></pre></td></tr></table></figure></p><p>你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。强调也可以直接插在文字中间：<br><code>un*frigging*believable</code><br>但是<strong>如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号</strong>。<br>如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：<br><code>\*this text is surrounded by literal asterisks\*</code></p><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p><del>删除线</del> 在文字两边加 双波浪号<br><code>~~删除线~~</code>    </p><h4 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h4><p>在空白行下方添加三条“-”横线。</p><hr><h3 id="强制换行"><a href="#强制换行" class="headerlink" title="强制换行"></a>强制换行</h3><p>在行尾输入两个空格<br>这个就是另一行</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>如果要标记一小段行内代码，你可以用反引号把它包起来（`），例如：Use the <code>printf()</code> function.<br><code>Use the `printf()` function.</code><br>这段语法会产生：<br><code>&lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;</code><br>多行代码可以使用三个 `</p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。<br>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。<br>行内式的图片语法看起来像是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![Alt text](/path/to/img.jpg)</span><br><span class="line"></span><br><span class="line">![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</span><br></pre></td></tr></table></figure></p><p>详细叙述如下：</p><ul><li>一个惊叹号 !</li><li>接着一个方括号，里面放上图片的替代文字</li><li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 ‘title’ 文字。</li></ul><p>参考式的图片语法则长得像这样：<br><code>![Alt text][id]</code><br>「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：<br><code>[id]: url/to/image  &quot;Optional title attribute&quot;</code>   </p><h3 id="表格Tables"><a href="#表格Tables" class="headerlink" title="表格Tables"></a>表格Tables</h3><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>Content Cell</td><td>Content Cell</td></tr><tr><td>Content Cell</td><td>Content Cell</td></tr></tbody></table><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用尖括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：<br><code>&lt;http://example.com/&gt;</code><br>Markdown会转成：<br><code>&lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;</code><br>邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：<a href="mailto:&#x6d;&#x69;&#x6e;&#103;&#x78;&#105;&#110;&#x6b;&#101;&#x40;&#104;&#x6f;&#x74;&#x6d;&#x61;&#x69;&#x6c;&#46;&#99;&#x6f;&#x6d;" target="_blank" rel="noopener">&#x6d;&#x69;&#x6e;&#103;&#x78;&#105;&#110;&#x6b;&#101;&#x40;&#104;&#x6f;&#x74;&#x6d;&#x61;&#x69;&#x6c;&#46;&#99;&#x6f;&#x6d;</a><br><code>&lt;mingxinke@hotmail.com&gt;</code><br>Markdown会转成：<br><code>&lt;a href=&quot;mailto:address@example.com&quot;&gt;address@example.com&lt;/a&gt;</code>     </p><h3 id="反斜杠"><a href="#反斜杠" class="headerlink" title="反斜杠"></a>反斜杠</h3><p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 <code>&lt;em&gt;</code> 标签），你可以在星号的前面加上反斜杠：<br><code>\*literal asterisks\*</code><br>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line">*   星号</span><br><span class="line">_   底线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  括弧</span><br><span class="line">#   井字号</span><br><span class="line">+   加号</span><br><span class="line">-   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   惊叹号</span><br></pre></td></tr></table></figure></p><p>转自<a href="http://wowubuntu.com/markdown/" target="_blank" rel="noopener">http://wowubuntu.com/markdown/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;h3 id=&quot;宗旨&quot;&gt;&lt;a href=&quot;#宗旨&quot; class=&quot;headerlink&quot; title=&quot;宗旨&quot;&gt;&lt;/a&gt;宗旨&lt;/h3&gt;&lt;p&gt;Markdown语法的 &lt;strong&gt;目标是实现[易读易写]&lt;/strong&gt;&lt;br&gt;Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像&lt;em&gt;强调&lt;/em&gt;。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。&lt;br&gt;
    
    </summary>
    
      <category term="Markdown" scheme="http://yoursite.com/categories/Markdown/"/>
    
    
      <category term="Markdown" scheme="http://yoursite.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>设置QPushButton的图标在文本的后面</title>
    <link href="http://yoursite.com/2018/05/23/my-first-blog/"/>
    <id>http://yoursite.com/2018/05/23/my-first-blog/</id>
    <published>2018-05-23T14:40:54.000Z</published>
    <updated>2018-05-29T11:34:01.852Z</updated>
    
    <content type="html"><![CDATA[<p><strong>设置按钮的布局方向从右到左，这时图标的位置就在文本的后面了。代码如下：</strong><br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置布局的方向从右到左</span></span><br><span class="line">m_pBtnUser-&gt;setLayoutDirection(Qt::RightToLeft);</span><br></pre></td></tr></table></figure></p><p>效果如下：<br><img src="https://i.loli.net/2018/05/29/5b0d1fcf2a65f.jpg" alt="1526882956604_1"></p><p><strong>但是由于我们使用了菜单所以菜单图标位置也错了，下面使用css样式表设置菜单图标位置：</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">QPushButton</span><span class="selector-id">#btnUser</span><span class="selector-pseudo">::menu-indicator</span> &#123;</span><br><span class="line">    <span class="attribute">subcontrol-position</span>: left center;</span><br><span class="line">    <span class="attribute">subcontrol-origin</span>: padding;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最终效果：<br><img src="https://i.loli.net/2018/05/29/5b0d2021f1f9a.jpg" alt="1526882632131"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;设置按钮的布局方向从右到左，这时图标的位置就在文本的后面了。代码如下：&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Qt" scheme="http://yoursite.com/categories/Qt/"/>
    
    
      <category term="Qt" scheme="http://yoursite.com/tags/Qt/"/>
    
      <category term="QPushButton" scheme="http://yoursite.com/tags/QPushButton/"/>
    
      <category term="图标" scheme="http://yoursite.com/tags/%E5%9B%BE%E6%A0%87/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/05/23/hello-world/"/>
    <id>http://yoursite.com/2018/05/23/hello-world/</id>
    <published>2018-05-23T14:14:12.105Z</published>
    <updated>2018-05-29T09:15:09.202Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-StartMarkdown-Preview-Enhanced"><a href="#Quick-StartMarkdown-Preview-Enhanced" class="headerlink" title="Quick StartMarkdown Preview Enhanced"></a>Quick StartMarkdown Preview Enhanced</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
