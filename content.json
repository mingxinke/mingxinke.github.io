{"meta":{"title":"铭心客的博客","subtitle":null,"description":null,"author":"铭心客","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"小书匠编辑器使用手册","slug":"filename","date":"2018-05-25T14:37:24.038Z","updated":"2018-05-25T14:37:24.050Z","comments":true,"path":"2018/05/25/filename/","link":"","permalink":"http://yoursite.com/2018/05/25/filename/","excerpt":"","text":"概要小书匠编辑器是一款专为markdown写作而设计的编辑器。 主要功能 专为markdown写作设计的文档编辑器，让用户心无旁骛的进行创作。 多种编辑模式。单栏编辑，双栏编辑，三栏编辑，全屏写作，全屏阅读…想怎么切换，就怎么切换，就是这样随心所欲。 多种编辑器实现。codemirror编辑器（提供vim,emacs按键，行专注等），ace编辑器（提供vim，emacs按键绑定，显示行号），轻量编辑器，CJK竖排编辑器 多种主题选择。包括编辑器主题，预览区代码高亮主题，及预览区用户自定义css。 丰富的语法支持。不仅提供了常用的commanmarkdown语法，还提供了许多有用的扩展语法，比如==Latex公式==，==表格==, ==目录==， ==脚注==, ==视频==, ==音频==, ==附件==, ==checklist==, ==流程图==等。更多语法可查看&lt;小书匠语法使用手册&gt; 代码块文字格式语法。语法可查看&lt;小书匠语法使用手册&gt; 第三方同步。==浏览器存储==, ==本地文件系统存储==, ==dropbox==, ==evernote==, ==印象笔记==,==gitoschina==, ==为知笔记==, ==github==等多种存储方案，保证了用户数据的安全，也让用户在存储方案上有了更多的选择。 支持evernote，印象笔记。提供双向操作，可以将文章保存到evernote/印象笔记上，也可以从evernote/印象笔记上导入数据。同时提供标签，附件，图片，待办等相关处理。 强大的文件管理功能。文件信息，标签，附件，音频，视频，图片管理。 发布功能。 支持将文章发布到博客平台上。 邮件发送功能。 sourceMap对照功能。方便在源markdown文件和生成的html文件上进行比较，特别适合markdown初学者使用，了解每一个markdown解析产生的结果，也适用于文章后期的校对上。 ppt。 ppt跨屏演示 pdf预览 typewriter scrolling autocomplete 和 snippets 功能 离线版下载地址http://soft.xiaoshujiang.com WEB版访问地址http://markdown.xiaoshujiang.com 元数据使用说明语法开关元数据项，可以到设置面板里的语法扩展标签页下查看对应的元数据标识．在元数据里true时，表示当前文档强制打开该语法，false时表示强制关闭该语法．如果没有对应的元数据，则使用全局设置里的语法开关. preview_previewType元数据，可用的值为normal和presentation．用于文章在打开时，控制是否需要系统切换对应的预览界面．如果文章里没有该项元数据，或者元数据值不正确，则系统默认使用normal预览界面．该元数据仅控制文章打开时初始化的界面，用户依然可以通过按钮在不同预览界面间切换． 浏览器存储系统对创建的文章，都会在浏览器存储上进行保存。包括像evernote/印象笔记/github/dropbox等导入的文章，也都会保存一份副本，并创建一个标识，表示跟哪些第三方存储关联。 标题，标签文章标题的处理规则：如果文章内存在元数据title，则系统自动使用元数据内的title做为标题。如果文章未使用到元数据功能，用户可以通过维护文章信息按钮，修改标题。标签tags的规则也跟标题一样。 附件文章使用./做为附件的引用标识。对于图片，音频，视频，附件等链接的处理，系统只处理以./开头的链接，并转换成附件真实的地址进行显示。用户可以通过工具栏的插入图片，插入音频，插入视频，插入附件等按钮上传附件。 evernote/印象笔记小书匠编辑器提供对evernote/印象笔记的支持，下面的使用说明默认用户已经完成了evernote/印象笔记的绑定操作，并将当前的工作平台切换到evernote/印象笔记下。 新建通过新建按钮后，创建的文章将自动关联到evernote/印象笔记上(注:这里仅仅是在文章上创建一个关联的标识，只有当用户保存后，才能在服务器上查看到新的笔记) 打开点击笔记，系统将自动把笔记导入，并将当前文章切换为导入的笔记内容。导入的文章自动与evernote/印象笔记上的笔记关联，下次再点击该笔记时，将直接从浏览器存储上打开。用户可以通过切换存储平台浏览器存储，来删除该缓存的文件。导入的笔记如果本地没有缓存，系统将对服务器上的笔记进行判断，如果笔记是通过小书匠编辑器进行保存，并且文章在保存后没有被操作过，则系统自动使用保存时附带的markdown附件做为文章内容，重新导入。如果笔记已经被修改，或者笔记不是通过小书匠编辑器进行保存的，系统将自动将文章转换成markdown格式。 保存对于新创建的文章，用户可以直接保存ctrl+s，系统将弹出一个选择笔记本的窗口，确认后，系统将保存当前文章到evernote/印象笔记上。（在弹出窗口上选择笔记本时，如果用户选择了笔记，系统将覆盖该笔记） 对于已经存在的文章，但还没有保存到evernote/印象笔记，用户可以通过另存为ctrl+shift+s将当前文章保存到evernote/印象笔记上。 不管是保存，还是另存为，保存成功后，系统都将自动对当前文章与evernote/印象笔记上的笔记进行关联。下次保存时ctrl+s系统将自动同步保存到evernote/印象笔记上。 删除系统不提供删除操作，用户需要自己到evernote/印象笔记端删除，如果本地缓存了笔记，可以通过浏览器存储删除缓存。 重命名直接修改元数据title，如果文章内未使用元数据功能，可通过浏览器存储里的修改文章信息进行修改 标签管理系统自动通过每篇文章的元数据tags提取为笔记的标签。 附件管理打开时，系统自动将笔记上的附件导入到文章对应的附件管理器上。保存时，系统将根据文章内对附件的引用，将附件保存到服务器上。这里的引用包括音频，视频，附件，图片。如果文章内使用到了流程图，序列图，公式，统计图等，系统将会把这些内容转换成图片进行保存。由于evernote/印象笔记在部分终端不提供视频，音频的支持，查看保存的文章时，对应的音频，视频将以附件的形式存储。 待办事项目前系统仅同步了待办事项。 github/dropbox新建参考evernote/印象笔记的新建 打开参考evernote/印象笔记的打开不同的是，github/dropbox只能打开扩展名为html，markdown，md，mkd以及无扩展名的文件。 保存参考evernote/印象笔记的保存不同的是，github/dropbox保存时，仅保存了markdown文章本身，并不会将markdown转换成html进行保存，也不会处理附件相关的内容。对于新文章的保存，github/dropbox存储需要用户指定文件名及存储的位置。 删除系统不提供删除操作 重命名系统不提供重命名操作，只能通过另存为ctrl+shift+s，保存成新的文件。 本地文件系统存储本地文件系统存储仅在离线版提供支持。 新建参考evernote/印象笔记的新建 打开参考github/dropbox的打开不同的是，本地文件系统存储在打开文件时，将会自动关联文章内的附件引用标识./，自动抓取同级目录下对应的附件资源。 保存参考github/dropbox的保存不同的是，本地文件系统存储在保存时，不仅保存了markdown文章，还会处理附件相关的内容，将附件保存到同级目录下，请确保附件的名称不要重复，防止数据被覆盖丢失。 删除右击相应的文章可进行删除操作 重命名右击相应的文章可进行重命名操作 发布小书匠编辑器离线版提供文章发布功能，用户可以将自己的文章发布到博客系统上。发布功能实现了博客的metaweblogAPI（newPost, editPost, newMediaObject）。使用该发布功能，需要博客系统提供对应的api接口，系统将转换成html的文章和图片自动提交到博客系统上。 配置发布示例：博客链接地址：比如http://www.cnblogs.com/[用户名]/用户名：用户在该博客上的用户名密码：用户在该博客上的密码 测试通过的博客地址：博客园：http://www.cnblogs.com/[用户名]/开源中国：http://my.oschina.net/[用户名]/blog 邮件发送小书匠编辑器提供邮件发送功能，系统将对当前文章转换成html格式后进行发送，并对图片，视频等文件以附件的形式进行发送。 导出小书匠编辑器提供多种格式的导出文件功能。==html==,==markdown==,==html(inlinestyle)==,==word==,==zip==,==pdf==。 zip导出： 该导出将导出文章的所有信息，包括markdown,html,markdown文章内引用的所有附件，公式，流程图等对应的图片文件，以及方便再次导入时需要的标识数据文件。 pdf导出：目前pdf导出只能在chrome版浏览器上使用。 导入小书匠编辑器提供markdown, html, zip三种导入功能，并且实现了文本文件直接拖动导入功能。 zip导入：导入的zip文件必需是由小书匠编辑器导出的文件。 其他web版实现了图片直接粘贴功能，用户不仅可以拖动图片上传，还可以直接复制粘贴图片。","categories":[],"tags":[{"name":"小书匠,使用手册","slug":"小书匠-使用手册","permalink":"http://yoursite.com/tags/小书匠-使用手册/"}]},{"title":"Markdown语法","slug":"mduse-md","date":"2018-05-25T14:07:54.000Z","updated":"2018-05-25T16:39:09.144Z","comments":true,"path":"2018/05/25/mduse-md/","link":"","permalink":"http://yoursite.com/2018/05/25/mduse-md/","excerpt":"","text":"Markdown语法使用概述宗旨Markdown语法的 目标是实现[易读易写]Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像强调。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。 兼容HTMLMarkdown语法的目标是:成为一种适用于网络的书写语言。Markdown不是要取代HTML，甚至也没有要和它相近，它的语法种类很少，只对应HTML标记的一小部分Markdown 的构想不是要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种发布的格式，Markdown 是一种书写的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。要制约的只有一些 HTML 区块元素――比如&lt;div&gt;、&lt;table&gt;、&lt;pre&gt;、&lt;p&gt;等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的标签。例子如下：123456789这是一个普通段落。&lt;table&gt; &lt;tr&gt; &lt;td&gt;Foo&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;这是另一个普通段落。 这是一个普通段落。 Foo 这是另一个普通段落。 区块元素段落和换行一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 &lt;br /&gt; 标签。 标题Markdown支持两种标题的语法：类Setext和atx形式。类Setext形式是用底线的形式，利用=(最高阶标题)和-(第二阶标题)，任何数量的 = 和 - 都可以有效果。例如： This is an H1This is an H21234This is an H1=============This is an H2------------- 类Atx形式则是在行首插入1到6个#，对应到标题1到6阶，例如： 这是 H1这是 H2这是 H6123# 这是 H1## 这是 H2###### 这是 H6 区块引用 BlockquotesMarkdown 标记区块引用是使用类似 email 中用&gt;的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上&gt;： This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisseid sem consectetuer libero luctus adipiscing. Markdown 也允许你偷懒只在整个段落的第一行最前面加上&gt;： This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisseid sem consectetuer libero luctus adipiscing. 区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的&gt;： This is the first level of quoting. This is nested blockquote. Back to the first level. 引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等： 这是一个标题。 这是第一行列表项。 这是第二行列表项。 给出一些例子代码： return shell_exec(&quot;echo $input | $markdown_script&quot;); 任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择增加引用阶层。 列表Markdown支持有序和无序列表。无需列表中使用星号、加号或者减号为列表标记： red Green Blue 123* red* Green* Blue 等同于：123+ Red+ Green+ Blue 也等同于：123- Red- Green- Blue 有序列表则使用数字接着一个英文句点： Bird McHale Parish 1231. Bird2. McHale3. Parish 很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：12345&lt;ol&gt;&lt;li&gt;Bird&lt;/li&gt;&lt;li&gt;McHale&lt;/li&gt;&lt;li&gt;Parish&lt;/li&gt;&lt;/ol&gt; 你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。要让列表看起来更漂亮，你可以把内容用固定的缩进整理好： Lorem ipsum dolor sit amet, consectetuer adipiscing elit.Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit.Suspendisse id sem consectetuer libero luctus adipiscing. 如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 标签包起来，举例来说： 1234567* Bird* Magic转为&lt;ul&gt;&lt;li&gt;Bird&lt;/li&gt;&lt;li&gt;Magic&lt;/li&gt;&lt;/ul&gt; 12345678* Bird* Magic转为&lt;ul&gt;&lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt; 列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：1234567891. This is a list item with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit.2. Suspendisse id sem consectetuer libero luctus adipiscing. 如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：1234567* This is a list item with two paragraphs. This is the second paragraph in the list item. You&apos;reonly required to indent the first line. Lorem ipsum dolorsit amet, consectetuer adipiscing elit.* Another item in the same list. 如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符：123* 一列表项包含一个列表区块： &lt;代码写在这&gt; 当然，项目列表很可能会不小心产生，像是下面这样的写法：11986. What a great season. 换句话说，也就是在行首出现数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠。1986. What a great season.11986\\. What a great season. 代码区块和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 &lt;pre&gt; 和 &lt;code&gt; 标签来把代码区块包起来。要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，要和上一行空一行 例如，下面的输入： 这是一个普通段落： 这是一个代码区块 一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。也可以使用三个```表示 1234if(a&gt;b)&#123; a = 10;&#125; 区段元素链接Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。不管是哪一种，链接文字都是用 [方括号] 来标记。要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：This is an example inline link. This link has no title attribute.123This is [an example](http://example.com/ &quot;Title&quot;) inline link.[This link](http://example.net/) has no title attribute. 会产生：12345&lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt;an example&lt;/a&gt; inline link.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has notitle attribute.&lt;/p&gt; 如果你是要链接到同样主机的资源，你可以使用相对路径： 1See my [About](/about/) page for details. 接着，在文件的任意处，你可以把这个标记的链接内容定义出来： 链接 “请点击这里”1[链接](http://example.com/) &quot;请点击这里&quot; 链接内容定义的形式为： 方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字 接着一个冒号 接着一个以上的空格或制表符接着链接的网址 选择性地接着 title 内容，可以用单引号、双引号或是括弧包着 下面这三种链接的定义都是相同：123[foo]: http://example.com/ &quot;Optional Title Here&quot;[foo]: http://example.com/ &apos;Optional Title Here&apos;[foo]: http://example.com/ (Optional Title Here) 请注意： 有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。链接网址也可以用尖括号包起来：1[id]: &lt;http://example.com/&gt; &quot;Optional Title Here&quot; 强调Markdown 使用星号（*）和底线（_）作为标记强调字词的符号，被 * 或 _ 包围的字词会被转成用 &lt;em&gt; 标签包围，用两个 * 或 _ 包起来的话，则会被转成 &lt;strong&gt;，例如： single asteriskssingle underscoresdouble asterisksdouble underscores1234*single asterisks*_single underscores_**double asterisks**__double underscores__ 会转成1234&lt;em&gt;single asterisks&lt;/em&gt;&lt;em&gt;single underscores&lt;/em&gt;&lt;strong&gt;double asterisks&lt;/strong&gt;&lt;strong&gt;double underscores&lt;/strong&gt; 你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。强调也可以直接插在文字中间：un*frigging*believable但是如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号。如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：\\*this text is surrounded by literal asterisks\\* 删除线删除线 在文字两边加 双波浪号~~删除线~~ 下划线在空白行下方添加三条“-”横线。 强制换行在行尾输入两个空格这个就是另一行 代码如果要标记一小段行内代码，你可以用反引号把它包起来（`），例如：Use the printf() function.Use the `printf()` function.这段语法会产生：&lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;多行代码可以使用三个 ` 图片很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。行内式的图片语法看起来像是：123![Alt text](/path/to/img.jpg)![Alt text](/path/to/img.jpg &quot;Optional title&quot;) 详细叙述如下： 一个惊叹号 ! 接着一个方括号，里面放上图片的替代文字 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 ‘title’ 文字。 参考式的图片语法则长得像这样：![Alt text][id]「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：[id]: url/to/image &quot;Optional title attribute&quot; 视频%电影 音频~音乐 附件=附件 流程图 (语法)12345678st=&gt;start: 开始e=&gt;end: 结束op=&gt;operation: 操作步骤cond=&gt;condition: 是 或者 否?st-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 序列图 (语法)123小明-&gt;小李: 你好 小李, 最近怎么样?Note right of 小李: 小李想了想小李--&gt;小明: 还是老样子 脚注^1x表格Tables First Header Second Header Content Cell Content Cell Content Cell Content Cell 其它自动链接Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用尖括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：&lt;http://example.com/&gt;Markdown会转成：&lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：&#x6d;&#x69;&#110;&#x67;&#120;&#x69;&#110;&#107;&#x65;&#x40;&#x68;&#x6f;&#x74;&#109;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#111;&#x6d;&lt;mingxinke@hotmail.com&gt;Markdown会转成：&lt;a href=&quot;mailto:address@example.com&quot;&gt;address@example.com&lt;/a&gt; 反斜杠Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 &lt;em&gt; 标签），你可以在星号的前面加上反斜杠：\\*literal asterisks\\*Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：123456789101112\\ 反斜线` 反引号* 星号_ 底线&#123;&#125; 花括号[] 方括号() 括弧# 井字号+ 加号- 减号. 英文句点! 惊叹号 转自http://wowubuntu.com/markdown/","categories":[{"name":"Markdown","slug":"Markdown","permalink":"http://yoursite.com/categories/Markdown/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://yoursite.com/tags/Markdown/"}]},{"title":"设置QPushButton的图标在文本的后面","slug":"my-first-blog","date":"2018-05-23T14:40:54.000Z","updated":"2018-05-25T14:16:54.017Z","comments":true,"path":"2018/05/23/my-first-blog/","link":"","permalink":"http://yoursite.com/2018/05/23/my-first-blog/","excerpt":"设置QPushButton的图标在文本的后面","text":"设置QPushButton的图标在文本的后面 12// 设置布局的方向从右到左m_pBtnUser-&gt;setLayoutDirection(Qt::RightToLeft); 效果如下（菜单图标显示到左边了）： 下面使用css样式表设置菜单图标：12345QPushButton#btnUser::menu-indicator &#123; subcontrol-position: left center; subcontrol-origin: padding; left: 2px;&#125; 最终效果：","categories":[{"name":"Qt","slug":"Qt","permalink":"http://yoursite.com/categories/Qt/"}],"tags":[{"name":"Qt","slug":"Qt","permalink":"http://yoursite.com/tags/Qt/"},{"name":"QPushButton","slug":"QPushButton","permalink":"http://yoursite.com/tags/QPushButton/"},{"name":"图标","slug":"图标","permalink":"http://yoursite.com/tags/图标/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-05-23T14:14:12.105Z","updated":"2018-05-23T14:14:12.105Z","comments":true,"path":"2018/05/23/hello-world/","link":"","permalink":"http://yoursite.com/2018/05/23/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}